name: CI for Dockerfile with Playwright Tests

on:
  push:
    branches:
      - trunk  # Exécuter uniquement sur la branche `trunk`

jobs:
  docker-build-test-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Installer Node.js et Playwright
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'  # Utiliser Node.js 18 pour éviter les warnings

      - name: Install dependencies
        run: |
          npm install
          npx playwright install firefox

      # Construire l'image Docker
      - name: Build Docker image
        run: docker build -t myapp:latest .

      # Lancer le conteneur Docker
      - name: Run Docker container
        run: |
          docker run -d --name myapp-container -p 8080:80 myapp:latest
          sleep 5  # Attendre que le conteneur soit prêt

      # Exécuter les tests Playwright
      - name: Run Playwright tests
        run: |
          npx playwright test tests/comparetest.test.js tests/firstest.test.js --project=firefox

      # Arrêter et nettoyer le conteneur après les tests
      - name: Stop Docker container
        run: |
          docker stop myapp-container
          docker rm myapp-container

      # Nettoyer les ressources Docker
      - name: Clean up Docker resources
        run: docker system prune -f

      # Pousser l'image sur Docker Hub (seulement si les tests réussissent)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Définir manuellement le tag (modifier cette ligne pour choisir le tag)
      - name: Set Docker tag manually
        run: echo "VERSION=0.1" >> $GITHUB_ENV  # Changez ici pour choisir le tag

      # Taguer l'image Docker avec le tag manuel
      - name: Tag Docker image with manual version
        run: |
          docker tag myapp:latest ${{ secrets.DOCKER_USERNAME }}/VroomVroomTaRace:${{ env.VERSION }}

      # Pousser l'image Docker vers Docker Hub avec le tag
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/VroomVroomTaRace:${{ env.VERSION }}

